// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/hello_message.proto

package go_hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyServiceClient interface {
	HelloWorld(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error)
	HelloNeeraj(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error)
	HelloName(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) HelloWorld(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error) {
	out := new(HelloMessage)
	err := c.cc.Invoke(ctx, "/hello.MyService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) HelloNeeraj(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error) {
	out := new(HelloMessage)
	err := c.cc.Invoke(ctx, "/hello.MyService/HelloNeeraj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) HelloName(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error) {
	out := new(HelloMessage)
	err := c.cc.Invoke(ctx, "/hello.MyService/HelloName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServiceServer is the server API for MyService service.
// All implementations must embed UnimplementedMyServiceServer
// for forward compatibility
type MyServiceServer interface {
	HelloWorld(context.Context, *HelloMessage) (*HelloMessage, error)
	HelloNeeraj(context.Context, *HelloMessage) (*HelloMessage, error)
	HelloName(context.Context, *HelloMessage) (*HelloMessage, error)
	mustEmbedUnimplementedMyServiceServer()
}

// UnimplementedMyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (UnimplementedMyServiceServer) HelloWorld(context.Context, *HelloMessage) (*HelloMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedMyServiceServer) HelloNeeraj(context.Context, *HelloMessage) (*HelloMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloNeeraj not implemented")
}
func (UnimplementedMyServiceServer) HelloName(context.Context, *HelloMessage) (*HelloMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloName not implemented")
}
func (UnimplementedMyServiceServer) mustEmbedUnimplementedMyServiceServer() {}

// UnsafeMyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServiceServer will
// result in compilation errors.
type UnsafeMyServiceServer interface {
	mustEmbedUnimplementedMyServiceServer()
}

func RegisterMyServiceServer(s grpc.ServiceRegistrar, srv MyServiceServer) {
	s.RegisterService(&MyService_ServiceDesc, srv)
}

func _MyService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.MyService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).HelloWorld(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_HelloNeeraj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).HelloNeeraj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.MyService/HelloNeeraj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).HelloNeeraj(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_HelloName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).HelloName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.MyService/HelloName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).HelloName(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MyService_ServiceDesc is the grpc.ServiceDesc for MyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _MyService_HelloWorld_Handler,
		},
		{
			MethodName: "HelloNeeraj",
			Handler:    _MyService_HelloNeeraj_Handler,
		},
		{
			MethodName: "HelloName",
			Handler:    _MyService_HelloName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hello_message.proto",
}

// MyService2Client is the client API for MyService2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyService2Client interface {
	HelloWorld2(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error)
}

type myService2Client struct {
	cc grpc.ClientConnInterface
}

func NewMyService2Client(cc grpc.ClientConnInterface) MyService2Client {
	return &myService2Client{cc}
}

func (c *myService2Client) HelloWorld2(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error) {
	out := new(HelloMessage)
	err := c.cc.Invoke(ctx, "/hello.MyService2/HelloWorld2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyService2Server is the server API for MyService2 service.
// All implementations must embed UnimplementedMyService2Server
// for forward compatibility
type MyService2Server interface {
	HelloWorld2(context.Context, *HelloMessage) (*HelloMessage, error)
	mustEmbedUnimplementedMyService2Server()
}

// UnimplementedMyService2Server must be embedded to have forward compatible implementations.
type UnimplementedMyService2Server struct {
}

func (UnimplementedMyService2Server) HelloWorld2(context.Context, *HelloMessage) (*HelloMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld2 not implemented")
}
func (UnimplementedMyService2Server) mustEmbedUnimplementedMyService2Server() {}

// UnsafeMyService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyService2Server will
// result in compilation errors.
type UnsafeMyService2Server interface {
	mustEmbedUnimplementedMyService2Server()
}

func RegisterMyService2Server(s grpc.ServiceRegistrar, srv MyService2Server) {
	s.RegisterService(&MyService2_ServiceDesc, srv)
}

func _MyService2_HelloWorld2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyService2Server).HelloWorld2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.MyService2/HelloWorld2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyService2Server).HelloWorld2(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MyService2_ServiceDesc is the grpc.ServiceDesc for MyService2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.MyService2",
	HandlerType: (*MyService2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld2",
			Handler:    _MyService2_HelloWorld2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hello_message.proto",
}
